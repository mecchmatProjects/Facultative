ZERO_TRANS = {
               ('q0', '0'): ('qH', '0', 'N'),
               ('q0', '1'): ('qH', '1', 'N'),
               ('q0', ' '): ('qH', ' ', 'N')
            }
from time import sleep

class TuringMachine:
    def __init__(self, tape, blank_symbol=' ', trans = ZERO_TRANS):
        self.tape = list(tape)  # Стрічка машини Тьюринга
        self.head_position = 1  # Початкова позиція головки
        self.state = 'q0'  # Початковий стан
        self.blank_symbol = blank_symbol  # Символ для пустої клітинки
        self.transitions = self.define_transitions(trans)

    def define_transitions(self, trans):
        """
        Визначення переходів машини Тьюринга.
        Переходи представлені у вигляді: { (стан, символ): (новий_стан, новий_символ, напрямок) }
        """
        return trans
        # return {
        #     ('q0', '1'): ('q0', '1', 'R'),  # Пропускати символи '1' вправо
        #     ('q0', '0'): ('qH', '1', 'N'),  # Зустріли '0' — переходимо в стан q1 і видаляємо розділювач
        # }

    def step(self):
        """Виконати один крок машини Тьюринга згідно з таблицею переходів."""
        current_symbol = self.tape[self.head_position]
        print()
        action = self.transitions.get((self.state, current_symbol))

        if action:
            new_state, new_symbol, direction = action
            # Змінюємо поточний символ на новий
            old_symbol = self.tape[self.head_position]
            self.tape[self.head_position] = new_symbol
            # Змінюємо стан
            self.state = new_state
            # Рухаємо головку
            if direction == 'R':
                self.head_position += 1
            elif direction == 'L':
                self.head_position -= 1
            # Нічого не робимо, якщо напрямок 'N' (halt)
            return old_symbol, new_symbol


    def run(self):
        """Виконувати кроки машини Тьюринга, поки не досягне стану halt (qH)."""
        while self.state != 'qH':
            a,b = self.step()
            print(f"Стан: {self.state}, Стрічка: {''.join(self.tape)}, Головка на позиції: {self.head_position}, читає {a}, запис {b} ")
            input()
            # sleep(1)

        print(f"Кінцевий результат: {''.join(self.tape)}")


# Створимо стрічку, яка представляє два числа в унарній системі
# Наприклад, числа 3 і 2 будуть представлені як "111011" (три одиниці, нуль як роздільник, дві одиниці)
tape = " 1110 "

ADD_ONE = {
             ('q0', '1'): ('q0', '1', 'R'),  # Пропускати символи '1' вправо
             ('q0', '0'): ('qH', '1', 'N'),  # Зустріли '0' — переходимо в стан qH зупиняємося
         }

INCREMENT = {
             ('q0', '1'): ('q1', '1', 'R'),  # Пропускати символи '1' вправо
             ('q0', '0'): ('q0', '0', 'R'),  # Пропускати символи '0' вправо
             ('q0', ' '): ('qR0', ' ', 'L'),  # Кінець слова

             ('q1', '1'): ('q1', '1', 'R'),  # Пропускати символи '1' вправо
             ('q1', '0'): ('q0', '0', 'R'),  #
             ('q1', ' '): ('qR1','0', 'L'),  #

             ('qR0', '0'): ('qH', '1', 'N'),  # Завершуємо
             # ('qR0', '0'): ('q0', '1', 'R'),  #
             # ('qR0', ' '): ('qR0', '0', 'R'),  #

             ('qR1', '1'): ('qR1', '0', 'L'),  # Повертємося щоб додати 1
             ('qR1', '0'): ('qH', '1', 'N'),  #
             ('qR1', ' '): ('qP', ' ', 'R'),  #

             ('qP', '0'): ('qH', '1', 'N')  # Випадок 11111
             # ('q0', '0'): ('qH', '1', 'N'),  #
             # ('q0', ' '): ('qP', ' ', 'R'),  #
}

COPY = {
    # Стан q0: пошук кінця числа
    ('q0', '0'): ('q0', '0', 'R'),  # Продовжуємо йти вправо по стрічці
    ('q0', '1'): ('q0', '1', 'R'),  # Продовжуємо йти вправо по стрічці
    ('q0', ' '): ('q1', 'C', 'L'),  # Знайшли пробіл, повертаємося для копіювання

    # Стан q1: підготовка до копіювання
    ('q1', '0'): ('q1', '0', 'L'),  # Починаємо копіювати 0
    ('q1', '1'): ('q1', '1', 'L'),  # Починаємо копіювати 1
    ('q1', ' '): ('q2', ' ', 'R'),  # Створюємо пробіл між копією і оригіналом

    # Стан q2: копіювання числа
    ('q2', '0'): ('q3', 'Y', 'R'),  # Копіюємо 0
    ('q2', '1'): ('q7', 'X', 'R'),  # Копіюємо 1
    ('q2', 'C'): ('q11', 'C', 'L'),  # Досягли пробілу, переходимо в інший бік для завершення

    # Стан q3: копіюємо біти назад
    ('q3', '0'): ('q3', '0', 'R'),  # Копіюємо назад 0
    ('q3', '1'): ('q3', '1', 'R'),  # Копіюємо назад 1
    ('q3', 'C'): ('q4', 'C', 'R'),  # Дійшли до кінця, завершення

    # Стан q4: повертаємося до початку після копіювання
    ('q4', '0'): ('q4', '0', 'R'),  # Йдемо до кінця числа 0
    ('q4', '1'): ('q4', '1', 'R'),  # Йдемо до кінця числа 1
    ('q4', ' '): ('q5', '0', 'L'),  # Зупиняємося після копіювання і завершення

    # Стан q5: повертаємося до початку після копіювання
    ('q5', '0'): ('q5', '0', 'L'),  # Йдемо до кінця числа 0
    ('q5', '1'): ('q5', '1', 'L'),  # Йдемо до кінця числа 1
    ('q5', 'C'): ('q5', 'C', 'L'),  # Зупиняємося після копіювання і завершення

    # Стан q6:
    ('q6', '0'): ('q6', '0', 'L'),  # Йдемо до кінця числа 0
    ('q6', '1'): ('q6', '1', 'L'),  # Йдемо до кінця числа 1
    ('q6', 'Y'): ('q2', 'Y', 'R'),  # Зупиняємося після копіювання і завершення

    # Стан q7:
    ('q7', '0'): ('q7', '0', 'R'),  # Йдемо до кінця числа 0
    ('q7', '1'): ('q7', '1', 'R'),  # Йдемо до кінця числа 1
    ('q7', 'C'): ('q8', 'C', 'R'),  # Зупиняємося після копіювання і завершення

    # Стан q7:
    ('q8', '0'): ('q8', '0', 'R'),  # Йдемо до кінця числа 0
    ('q8', '1'): ('q8', '1', 'R'),  # Йдемо до кінця числа 1
    ('q8', ' '): ('q9', '1', 'L'),  # Зупиняємося після копіювання і завершення

    # Стан q9:
    ('q9', '0'): ('q8', '0', 'L'),  # Йдемо до кінця числа 0
    ('q9', '1'): ('q8', '1', 'L'),  # Йдемо до кінця числа 1
    ('q9', 'C'): ('q10', 'C', 'L'),  # Зупиняємося після копіювання і завершення

    # Стан q10:
    ('q10', '0'): ('q10', '0', 'L'),  # Йдемо до кінця числа 0
    ('q10', '1'): ('q10', '1', 'L'),  # Йдемо до кінця числа 1
    ('q10', 'X'): ('q2', 'X', 'R'),  # Зупиняємося після копіювання і завершення

    # Стан q11:
    ('q11', 'X'): ('q11', '1', 'L'),  # Йдемо до кінця числа 0
    ('q11', 'Y'): ('q11', '0', 'L'),  # Йдемо до кінця числа 1
    ('q11', ' '): ('qH', ' ', 'R'),  # Зупиняємося після копіювання і завершення

}

COPY2 = {
    ('q0', '0'): ('q0', '0', 'R'),  # Move right over 0’s
    ('q0', '1'): ('q0', '1', 'R'),  # Move right over 1’s
    ('q0', ' '): ('q2', 'c', 'L'),  # Change first blank to c, move left to q2

    # Move left over 0’s and 1’s in q2
    ('q2', '0'): ('q2', '0', 'L'),
    ('q2', '1'): ('q2', '1', 'L'),
    ('q2', ' '): ('q3', ' ', 'R'),  # At first blank, move right to q3

    # Change 0 to d, 1 to e, or c means copying is over
    ('q3', '0'): ('q4', 'd', 'R'),
    ('q3', '1'): ('q5', 'e', 'R'),
    ('q3', 'c'): ('q7', 'c', 'L'),

    # Move right over 0’s, 1’s, and c in q4
    ('q4', '0'): ('q4', '0', 'R'),
    ('q4', '1'): ('q4', '1', 'R'),
    ('q4', 'c'): ('q4', 'c', 'R'),
    ('q4', ' '): ('q6', '0', 'L'),  # Replace first blank with 0, move left to q6

    # Move right over 0’s, 1’s, and c in q5
    ('q5', '0'): ('q5', '0', 'R'),
    ('q5', '1'): ('q5', '1', 'R'),
    ('q5', 'c'): ('q5', 'c', 'R'),
    ('q5', ' '): ('q6', '1', 'L'),  # Replace first blank with 1, move left to q6

    # Move left over 0’s, 1’s, and c in q6, change d back to 0 and e to 1
    ('q6', '0'): ('q6', '0', 'L'),
    ('q6', '1'): ('q6', '1', 'L'),
    ('q6', 'c'): ('q6', 'c', 'L'),
    ('q6', 'd'): ('q3', '0', 'R'),  # Change d back into 0, move right to q3
    ('q6', 'e'): ('q3', '1', 'R'),  # Change e back into 1, move right to q3

    # Move left over 0’s, 1’s in q7, and halt at first blank
    ('q7', '0'): ('q7', '0', 'L'),
    ('q7', '1'): ('q7', '1', 'L'),
    ('q7', ' '): ('qH', ' ', 'R'),  # Move right and halt at q8
}

# Створюємо і запускаємо машину Тьюринга
# tm = TuringMachine(tape, trans=ADD_ONE)
#
# tm = TuringMachine(tape, trans=INCREMENT)
# tm.run()
#
# tm = TuringMachine(" 1111 ", trans=INCREMENT)
# tm.run()

tm = TuringMachine(" 101     ", trans=COPY2)
tm.run()